NodeJs
> node is backend javaScript Framework

> single thread non blocking async I/O 
> convert code direct in byte code
> Run over V8 Engine

REPL
> Read Event Print Loop

> IIS (.net)
> Tomact/Apache(Java)
> NodeJs(NodeJs)

npm 
> Node Package Manager

Dependency/Local Dependency
    > Max Dependency local
    > They work wrt to particular folder
Dev Dependency
    > They work wrt to particular folder
    > All those that use wrt to only development
        Need at the time of development
            Testing

Global Dependency
    > This installed in the system
    > We have to install only once
    > They have to generate or run the app
    > Need Admin access to install
    > Very few Dependency will go global

////
Package.json
/////
> Description of app
> packages
> scripts
> meta(author,version)

////////////
Step To generate Package.json
/////////////
> navigate to the folder using cmd
> npm init
> answer all question
> type yes

#Short cut > npm init -y

////////////
How to install package
/////////////

#Local
> npm i packagename

#Dev
> npm i packagename --save-dev 

#Global
> Open cmd as Admin
> npm i -g packagename

os
http
fs

Nodemon 
> forever running
> continous development
> npm i -g nodemon

crud
C > Create (Post)
R > Read   (get)
U > update (put)
D > Delete (delete)

npm i @babel/core @babel/register @babel/preset-env

npm i -g @aakashdeveloper/create-node-app
> generate 

0.0.0.0/0

function add(a,b){
    return a+b
}

add(1,2)
https://en.wikipedia.org/wiki/List_of_HTTP_status_codes

>>>>>>>>Next Topic 2 days<<<<<<<<
Learn Update Delete in Mongo
Crud with node

>>>>>>>>Next Topic 2days<<<<<<<<
Blog app
session management
user management 

.bson 
.json


PostMan 
crud
C > Create (Post)
R > Read   (get)
U > update (put)
D > Delete (delete)

CORS 
> cross origin resource sharing
> set headers 
> cors

npm i body-parser cors ejs express mongodb
//testing
npm i chai chai-http mocha

/////////////////
async await
ajax
promises

http
run on http server
Express basis
Routing(listing,details)
express middleware
crud (with db)
Testing
Deployment
mongodb(basic)
crud(mongodb)
crud(mongoose)
crud with react(separate file)
Caching(Redis)
isomorphic(running both on same server)
crud with ejs
Session&cookies
Authenticate & Authorise
User management
Login(with JWT)
Login(With Google)(passport)
Debugging
Custom middleware
Image upload

////////////
payment gateway
email
oonodejs
NodeJs with postgres
Chatapp
Email With Node(sendgrid)

---------------
GraphQl
Redux
AWS
ReactHooks


Insert
Get
Update
Delete

Create => post
Read   => Get
Update => put/patch
Delete => delete

Database(store)

SQl  NoSQL

JSON > BSON

JSON >JavaScript Object Notation
Way to represent data 

var data = [
    {
        "name":"John",
        "class":"Node"
    },
    {
        "name":"Alvin",
        "class":"React"
    }
]

Join
Relational Database

Non Relational Database
Nested Collection

{
    customer_id:1
    customer_name:'John'
    film:[
       film_id:1,
       film_name:'Avengers',
       screen_id:1,
       room:[
           room_id:1
           noofseats:10,
           seats:[

           ]
       ]
    ]
}

lookups

repeating data is more effiecent than joins

/////////////////
_id
name:req.body.name,
                email:req.body.email,
                city: req.body.city,
                phone: req.body.phone,
                isActive:req.body.isActive,
                role: req.body.role


req > request
    > params (after / { http://localhost:9800/hotel/1})
    > query  (after ? { http://localhost:9800/hotel?id=1})
    > body   (we send as body from form or postman)
res > response


params is compulsory
query params is optional

what ever value recived from params of query params
they all are string

mongod --dbpath   --port 8977


MVC > .net Framework


Model
Controller
View

title
Description
createBy:
createrId:
isActive:true
tags:
date:
updatedate:

JWT
Json Web Token

npm i express body-parser cors express bcryptjs jsonwebtoken mongoose

eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwMjlmYzU0ODZhZjkxMjVmZTBjNGNiMCIsImlhdCI6MTYxMzM2NTkzMiwiZXhwIjoxNjEzNDUyMzMyfQ.DUiUfC9ND-IVSb2soXLhsh4lkuKuqHGZlatZ4Grb5fQ

eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjYwMjlmZmQxNjc3YWFlMjlmMDk1NmZmZCIsImlhdCI6MTYxMzM2NTk5NCwiZXhwIjoxNjEzNDUyMzk0fQ.MQ-g1HJVQn6obB63tQziVzvFWnITaryuSGb9X-uLrm8